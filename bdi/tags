!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Blocker	blocker.h	/^	Blocker(string cd,string na,int bs,int dl,int sz)$/;"	f	class:Blocker
Blocker	blocker.h	/^class Blocker$/;"	c
DATA	parser/file_reader.cpp	8;"	d	file:
DATA	parser/file_reader.h	8;"	d
DATA_SIZE	parser/file_reader.cpp	9;"	d	file:
DATA_SIZE	parser/file_reader.h	7;"	d
MAX_TABLE_ENT	parser/file_reader.h	9;"	d
SINGLE_DATA_SIZE	parser/file_reader.cpp	10;"	d	file:
SM_ID	parser/file_reader.h	6;"	d
TIME	parser/file_reader.h	5;"	d
_FILE_READER_H_	parser/file_reader.h	3;"	d
__DATA_COMPRESS_H__	data_compress.h	3;"	d
base	blocker.h	/^	int base;$/;"	m	class:Blocker
check_base	data_compress.cpp	/^bool check_base(vector<string>& part_output,int base,int delta,string& base_str)$/;"	f
check_zero	data_compress.cpp	/^void check_zero(string packet,int data_size,vector<string>& part_output,int base,int delta)$/;"	f
code	blocker.h	/^	string code;$/;"	m	class:Blocker
compress	data_compress.cpp	/^string compress(string packet,int data_size,vector<pair<string,Blocker*> >& tracker,int& used_base,int& used_delta,string& base_str)$/;"	f
convert_base	data_compress.cpp	/^bool convert_base(string src,string dst,int base,int delta,string& processed)$/;"	f
convert_hexa	data_compress.cpp	/^string convert_hexa(int num,int delta)$/;"	f
convert_int	data_compress.cpp	/^long convert_int(string s)$/;"	f
decompress	data_compress.cpp	/^string decompress(string input,vector<pair<string,Blocker*> > tracker)$/;"	f
delta	blocker.h	/^	int delta;$/;"	m	class:Blocker
form_output	data_compress.cpp	/^string form_output(vector<string> part_output)$/;"	f
get_base_delta	data_compress.cpp	/^void get_base_delta(vector<pair<string,Blocker*> > tracker,int& base,int& delta,string ss)$/;"	f
get_binary	data_compress.cpp	/^vector<char> get_binary(int num,int limit)$/;"	f
get_binary_c	data_compress.cpp	/^vector<char> get_binary_c(vector<char> b)$/;"	f
get_binary_c	sample.cpp	/^vector<char> get_binary_c(vector<char> b)$/;"	f
get_binary_hexa	data_compress.cpp	/^vector<char> get_binary_hexa(string str)$/;"	f
get_file_input	parser/file_reader.cpp	/^string get_file_input(int index,int& data_size)$/;"	f
get_int	data_compress.cpp	/^long get_int(vector<char> binary,bool is_neg)$/;"	f
get_two_c	data_compress.cpp	/^long get_two_c(long num,int delta)$/;"	f
get_zero_out	data_compress.cpp	/^string get_zero_out(int num)$/;"	f
init_blocks	data_compress.cpp	/^void init_blocks(vector<pair<string,Blocker*> >& tracker)$/;"	f
input_data	parser/file_reader.cpp	/^vector<vector<string> > input_data;$/;"	v
lc_dcp	data_compress.cpp	/^unordered_map<int,char> lc_dcp;$/;"	v
lookup_hexa	data_compress.cpp	/^void lookup_hexa()$/;"	f
main	main_src.cpp	/^int main(int argc,char *argv[])$/;"	f
main	sample.cpp	/^int main()$/;"	f
name	blocker.h	/^	string name;$/;"	m	class:Blocker
open_file	parser/file_reader.cpp	/^int open_file(string file_name)$/;"	f
size	blocker.h	/^	int size;$/;"	m	class:Blocker
zero_diff	data_compress.cpp	/^bool zero_diff(string src,string dst,int delta,string& p_input)$/;"	f
~Blocker	blocker.h	/^	~Blocker()$/;"	f	class:Blocker
